// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/16/2021 07:51:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Direction2ProductID
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Direction2ProductID_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [1:0] Dir_in;
reg Enable;
reg RESET_N;
// wires                                               
wire [3:0] ProductID;

// assign statements (if any)                          
Direction2ProductID i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.Dir_in(Dir_in),
	.Enable(Enable),
	.ProductID(ProductID),
	.RESET_N(RESET_N)
);
initial 
begin 
#160000 $finish;
end 

// CLOCK
initial
begin
	CLOCK = 1'b1;
	CLOCK = #5000 1'b0;
	# 5000;
	repeat(14)
	begin
		CLOCK = 1'b1;
		CLOCK = #5000 1'b0;
		# 5000;
	end
	CLOCK = 1'b1;
	CLOCK = #5000 1'b0;
end 

// Enable
initial
begin
	Enable = 1'b0;
	Enable = #20000 1'b1;
	Enable = #10000 1'b0;
	Enable = #20000 1'b1;
	Enable = #10000 1'b0;
	Enable = #20000 1'b1;
	Enable = #10000 1'b0;
	Enable = #10000 1'b1;
	Enable = #10000 1'b0;
	Enable = #10000 1'b1;
	Enable = #20000 1'b0;
end 

// RESET_N
initial
begin
	RESET_N = 1'b1;
	RESET_N = #140000 1'b0;
	RESET_N = #10000 1'b1;
end 
// Dir_in[ 1 ]
initial
begin
	Dir_in[1] = 1'b0;
	Dir_in[1] = #20000 1'b1;
	Dir_in[1] = #10000 1'b0;
	Dir_in[1] = #20000 1'b1;
	Dir_in[1] = #10000 1'b0;
	Dir_in[1] = #10000 1'b1;
	Dir_in[1] = #10000 1'b0;
	Dir_in[1] = #20000 1'b1;
	Dir_in[1] = #10000 1'b0;
	Dir_in[1] = #10000 1'b1;
	Dir_in[1] = #10000 1'b0;
end 
// Dir_in[ 0 ]
initial
begin
	Dir_in[0] = 1'b0;
	Dir_in[0] = #70000 1'b1;
	Dir_in[0] = #10000 1'b0;
	Dir_in[0] = #20000 1'b1;
	Dir_in[0] = #10000 1'b0;
	Dir_in[0] = #20000 1'b1;
	Dir_in[0] = #10000 1'b0;
end 
endmodule

