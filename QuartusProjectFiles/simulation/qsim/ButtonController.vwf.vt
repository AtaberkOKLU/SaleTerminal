// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2021 16:03:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ButtonController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ButtonController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:0] KEY;
reg [2:0] SW;
// wires                                               
wire [3:0] CMD_En;
wire [3:0] CMD_Reg;
wire [2:0] CleanSWOut;
wire [3:0] KEY_En;
wire [3:0] KEY_Reg;

// assign statements (if any)                          
ButtonController i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.CMD_En(CMD_En),
	.CMD_Reg(CMD_Reg),
	.CleanSWOut(CleanSWOut),
	.KEY(KEY),
	.KEY_En(KEY_En),
	.KEY_Reg(KEY_Reg),
	.SW(SW)
);
initial 
begin 
#500000 $finish;
end 

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b1;
	CLOCK_50 = #5000 1'b0;
	# 5000;
	repeat(48)
	begin
		CLOCK_50 = 1'b1;
		CLOCK_50 = #5000 1'b0;
		# 5000;
	end
	CLOCK_50 = 1'b1;
	CLOCK_50 = #5000 1'b0;
end 
// KEY[ 3 ]
initial
begin
	KEY[3] = 1'b1;
	KEY[3] = #350000 1'b0;
	KEY[3] = #40000 1'b1;
	KEY[3] = #60000 1'b0;
	KEY[3] = #40000 1'b1;
end 
// KEY[ 2 ]
initial
begin
	KEY[2] = 1'b1;
	KEY[2] = #60000 1'b0;
	KEY[2] = #110000 1'b1;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b1;
	KEY[1] = #220000 1'b0;
	KEY[1] = #50000 1'b1;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b1;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #300000 1'b1;
	SW[0] = #130000 1'b0;
end 
endmodule

