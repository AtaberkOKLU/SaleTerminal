// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2021 19:56:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          StateMachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module StateMachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BarcodeDigitCompleted;
reg [3:0] Barcode_DigitIn_0;
reg [3:0] Barcode_DigitIn_1;
reg [3:0] Barcode_DigitIn_2;
reg [3:0] Barcode_DigitIn_3;
reg CLOCK_50;
reg [3:0] CMD_En;
reg [3:0] CMD_Reg;
reg [2:0] CleanSWOut;
reg [3:0] KEY_En;
reg [3:0] KEY_Reg;
reg [2:0] NumOfBarcodeDigitsEntered;
reg RESET_N;
// wires                                               
wire [3:0] Barcode_Digit_in;
wire Barcode_Enable;
wire RSTN_BarcodeController_Pulse;

// assign statements (if any)                          
StateMachine i1 (
// port map - connection between master ports and signals/registers   
	.BarcodeDigitCompleted(BarcodeDigitCompleted),
	.Barcode_DigitIn_0(Barcode_DigitIn_0),
	.Barcode_DigitIn_1(Barcode_DigitIn_1),
	.Barcode_DigitIn_2(Barcode_DigitIn_2),
	.Barcode_DigitIn_3(Barcode_DigitIn_3),
	.Barcode_Digit_in(Barcode_Digit_in),
	.Barcode_Enable(Barcode_Enable),
	.CLOCK_50(CLOCK_50),
	.CMD_En(CMD_En),
	.CMD_Reg(CMD_Reg),
	.CleanSWOut(CleanSWOut),
	.KEY_En(KEY_En),
	.KEY_Reg(KEY_Reg),
	.NumOfBarcodeDigitsEntered(NumOfBarcodeDigitsEntered),
	.RESET_N(RESET_N),
	.RSTN_BarcodeController_Pulse(RSTN_BarcodeController_Pulse)
);
initial 
begin 
#100000 $finish;
end 

// BarcodeDigitCompleted
initial
begin
	BarcodeDigitCompleted = 1'b0;
end 
// Barcode_DigitIn_0[ 3 ]
initial
begin
	Barcode_DigitIn_0[3] = 1'b0;
end 
// Barcode_DigitIn_0[ 2 ]
initial
begin
	Barcode_DigitIn_0[2] = 1'b0;
end 
// Barcode_DigitIn_0[ 1 ]
initial
begin
	Barcode_DigitIn_0[1] = 1'b0;
end 
// Barcode_DigitIn_0[ 0 ]
initial
begin
	Barcode_DigitIn_0[0] = 1'b0;
end 
// Barcode_DigitIn_1[ 3 ]
initial
begin
	Barcode_DigitIn_1[3] = 1'b0;
end 
// Barcode_DigitIn_1[ 2 ]
initial
begin
	Barcode_DigitIn_1[2] = 1'b0;
end 
// Barcode_DigitIn_1[ 1 ]
initial
begin
	Barcode_DigitIn_1[1] = 1'b0;
end 
// Barcode_DigitIn_1[ 0 ]
initial
begin
	Barcode_DigitIn_1[0] = 1'b0;
end 
// Barcode_DigitIn_2[ 3 ]
initial
begin
	Barcode_DigitIn_2[3] = 1'b0;
end 
// Barcode_DigitIn_2[ 2 ]
initial
begin
	Barcode_DigitIn_2[2] = 1'b0;
end 
// Barcode_DigitIn_2[ 1 ]
initial
begin
	Barcode_DigitIn_2[1] = 1'b0;
end 
// Barcode_DigitIn_2[ 0 ]
initial
begin
	Barcode_DigitIn_2[0] = 1'b0;
end 
// Barcode_DigitIn_3[ 3 ]
initial
begin
	Barcode_DigitIn_3[3] = 1'b0;
end 
// Barcode_DigitIn_3[ 2 ]
initial
begin
	Barcode_DigitIn_3[2] = 1'b0;
end 
// Barcode_DigitIn_3[ 1 ]
initial
begin
	Barcode_DigitIn_3[1] = 1'b0;
end 
// Barcode_DigitIn_3[ 0 ]
initial
begin
	Barcode_DigitIn_3[0] = 1'b0;
end 

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b0;
end 
// CMD_En[ 3 ]
initial
begin
	CMD_En[3] = 1'b0;
end 
// CMD_En[ 2 ]
initial
begin
	CMD_En[2] = 1'b0;
end 
// CMD_En[ 1 ]
initial
begin
	CMD_En[1] = 1'b0;
end 
// CMD_En[ 0 ]
initial
begin
	CMD_En[0] = 1'b0;
end 
// CMD_Reg[ 3 ]
initial
begin
	CMD_Reg[3] = 1'b0;
end 
// CMD_Reg[ 2 ]
initial
begin
	CMD_Reg[2] = 1'b0;
end 
// CMD_Reg[ 1 ]
initial
begin
	CMD_Reg[1] = 1'b0;
end 
// CMD_Reg[ 0 ]
initial
begin
	CMD_Reg[0] = 1'b0;
end 
// CleanSWOut[ 2 ]
initial
begin
	CleanSWOut[2] = 1'b0;
end 
// CleanSWOut[ 1 ]
initial
begin
	CleanSWOut[1] = 1'b0;
end 
// CleanSWOut[ 0 ]
initial
begin
	CleanSWOut[0] = 1'b0;
end 
// KEY_En[ 3 ]
initial
begin
	KEY_En[3] = 1'b0;
end 
// KEY_En[ 2 ]
initial
begin
	KEY_En[2] = 1'b0;
end 
// KEY_En[ 1 ]
initial
begin
	KEY_En[1] = 1'b0;
end 
// KEY_En[ 0 ]
initial
begin
	KEY_En[0] = 1'b0;
end 
// KEY_Reg[ 3 ]
initial
begin
	KEY_Reg[3] = 1'b0;
end 
// KEY_Reg[ 2 ]
initial
begin
	KEY_Reg[2] = 1'b0;
end 
// KEY_Reg[ 1 ]
initial
begin
	KEY_Reg[1] = 1'b0;
end 
// KEY_Reg[ 0 ]
initial
begin
	KEY_Reg[0] = 1'b0;
end 
// NumOfBarcodeDigitsEntered[ 2 ]
initial
begin
	NumOfBarcodeDigitsEntered[2] = 1'b0;
end 
// NumOfBarcodeDigitsEntered[ 1 ]
initial
begin
	NumOfBarcodeDigitsEntered[1] = 1'b0;
end 
// NumOfBarcodeDigitsEntered[ 0 ]
initial
begin
	NumOfBarcodeDigitsEntered[0] = 1'b0;
end 

// RESET_N
initial
begin
	RESET_N = 1'b0;
end 
endmodule

