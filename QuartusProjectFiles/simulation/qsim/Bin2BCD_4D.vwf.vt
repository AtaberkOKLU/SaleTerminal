// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2021 11:02:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Bin2BCD_4D
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Bin2BCD_4D_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] Binary;
// wires                                               
wire [15:0] BCD;

// assign statements (if any)                          
Bin2BCD_4D i1 (
// port map - connection between master ports and signals/registers   
	.BCD(BCD),
	.Binary(Binary)
);
initial 
begin 
#160000 $finish;
end 
// Binary[ 11 ]
initial
begin
	Binary[11] = 1'b1;
	Binary[11] = #10000 1'b0;
end 
// Binary[ 10 ]
initial
begin
	Binary[10] = 1'b1;
	Binary[10] = #10000 1'b0;
	Binary[10] = #30000 1'b1;
	Binary[10] = #10000 1'b0;
end 
// Binary[ 9 ]
initial
begin
	Binary[9] = 1'b1;
	Binary[9] = #10000 1'b0;
	Binary[9] = #10000 1'b1;
	Binary[9] = #10000 1'b0;
	Binary[9] = #10000 1'b1;
	Binary[9] = #10000 1'b0;
end 
// Binary[ 8 ]
initial
begin
	Binary[8] = 1'b1;
	Binary[8] = #10000 1'b0;
	Binary[8] = #10000 1'b1;
	Binary[8] = #10000 1'b0;
end 
// Binary[ 7 ]
initial
begin
	Binary[7] = 1'b1;
	Binary[7] = #10000 1'b0;
	Binary[7] = #10000 1'b1;
	Binary[7] = #10000 1'b0;
	Binary[7] = #10000 1'b1;
	Binary[7] = #10000 1'b0;
end 
// Binary[ 6 ]
initial
begin
	Binary[6] = 1'b0;
	Binary[6] = #20000 1'b1;
	Binary[6] = #10000 1'b0;
	Binary[6] = #10000 1'b1;
	Binary[6] = #10000 1'b0;
end 
// Binary[ 5 ]
initial
begin
	Binary[5] = 1'b0;
	Binary[5] = #40000 1'b1;
	Binary[5] = #10000 1'b0;
end 
// Binary[ 4 ]
initial
begin
	Binary[4] = 1'b0;
	Binary[4] = #40000 1'b1;
	Binary[4] = #10000 1'b0;
end 
// Binary[ 3 ]
initial
begin
	Binary[3] = 1'b1;
	Binary[3] = #10000 1'b0;
	Binary[3] = #10000 1'b1;
	Binary[3] = #10000 1'b0;
	Binary[3] = #10000 1'b1;
	Binary[3] = #10000 1'b0;
end 
// Binary[ 2 ]
initial
begin
	Binary[2] = 1'b1;
	Binary[2] = #10000 1'b0;
	Binary[2] = #10000 1'b1;
	Binary[2] = #10000 1'b0;
end 
// Binary[ 1 ]
initial
begin
	Binary[1] = 1'b0;
	Binary[1] = #20000 1'b1;
	Binary[1] = #10000 1'b0;
end 
// Binary[ 0 ]
initial
begin
	Binary[0] = 1'b0;
	Binary[0] = #20000 1'b1;
	Binary[0] = #10000 1'b0;
	Binary[0] = #10000 1'b1;
	Binary[0] = #10000 1'b0;
end 
endmodule

